ACTION
ВЫЧИСЛЯЕМЫЕ СВОЙСТВА
НАБЛЮДАЕМЫЙ STATE
REACTION


@inject("mainStore")
inject внедряет только необходимый store в приложении. Разные части нашего приложения используют разные хранилища,
которые мы перечисляем в inject через запятую. Естественно, подключаемые хранилища должны быть изначально перечислены в Provider.
Хранилища доступны в компоненте через this.props.yourStoreName.


@observer
export default class App extends React.Component
observer – декоратор указывает, что наш компонент будет подписан на данные, которые изменяются с помощью Mobx.
Данные изменились – в компоненте возникла реакция (ниже будет показано, как). Таким образом, никаких специальных
подписок и коллбэков – Mobx доставляет изменения сам!


@observable params = {value : "", ...}
observable – объект, любое изменение полей которого отслеживает Mobx (и передаёт сигналы в observer, который
подписан на наше конкретное хранилище).


@action validate = (name) => {...}
action – этим декоратором должен обёртываться любой хэндлер, который меняет state приложения и/или вызывает сайд-эффекты.
Здесь мы меняем значение value в @observable params.


@computed get sendDataButton() {
        return {}//some
}
computed – декоратор для функций, отслеживающих изменения в наших observable. Важным преимуществом Mobx является то,
что отслеживаются только те данные, которые вычисляются в computed и потом возвращаются в качестве результата.
Реакция и, как следствие, перерисовка virual DOM происходит только тогда, когда это необходимо.


@reaction(
            () => this.dataInput,
            (result) => {...}
)
reaction – инструмент для организации сайд-эффектов на основе изменившегося состояния. Он принимает две функции:
первая computed, возвращающая вычисленное состояние, вторая с эффектами, которые должны последовать вслед за изменениями state.
В нашем примере reaction применяется два раза. В первом мы смотрим состояние полей и делаем вывод о том, корректна ли вся форма,
а также записываем значение каждого поля. Во втором мы по клику на кнопку (точнее, при наличии признака «кнопка нажата»)
отправляем данные на сервер. Объект с данными выводится в консоль браузера. Поскольку mainStore знает все хранилища,
мы сразу после обработки клика кнопки можем позволить себе в императивном стиле отключить признак:
get(this.ButtonStore.items, "send_data").isClicked = false;